Index: src/test/com/thoughtworks/qdox/JavaDocBuilderTest.java
===================================================================
--- src/test/com/thoughtworks/qdox/JavaDocBuilderTest.java	(revision 483)
+++ src/test/com/thoughtworks/qdox/JavaDocBuilderTest.java	(working copy)
@@ -1,16 +1,28 @@
 package com.thoughtworks.qdox;
 
-import com.thoughtworks.qdox.model.*;
-import com.thoughtworks.qdox.model.util.SerializationUtils;
-import com.thoughtworks.qdox.parser.ParseException;
-import junit.framework.TestCase;
-
-import java.io.*;
+import java.io.File;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.StringReader;
+import java.io.UnsupportedEncodingException;
 import java.util.Arrays;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
-import java.util.HashSet;
 
+import junit.framework.TestCase;
+
+import com.thoughtworks.qdox.model.BeanProperty;
+import com.thoughtworks.qdox.model.DocletTag;
+import com.thoughtworks.qdox.model.JavaClass;
+import com.thoughtworks.qdox.model.JavaField;
+import com.thoughtworks.qdox.model.JavaMethod;
+import com.thoughtworks.qdox.model.JavaSource;
+import com.thoughtworks.qdox.model.Type;
+import com.thoughtworks.qdox.model.util.SerializationUtils;
+import com.thoughtworks.qdox.parser.ParseException;
+import com.thoughtworks.qdox.testdata.PropertyClass;
+
 /**
  * @author <a href="mailto:joew@thoughtworks.com">Joe Walnes</a>
  * @author Aslak Helles&oslash;y
@@ -863,4 +875,16 @@
         JavaField field = javaSource.getClasses()[0].getFieldByName("bad");
         assertEquals("{1,2,3}", field.getInitializationExpression().trim());
     }
+    
+    public void testBinaryClassFieldModifiers() {
+        JavaDocBuilder builder = new JavaDocBuilder();
+        JavaClass javaClass = builder.getClassByName( PropertyClass.class.getName() );
+        assertEquals("Class", PropertyClass.class.getName(), javaClass.getFullyQualifiedName());
+        JavaField javaField = javaClass.getFieldByName("aField");
+        assertNotNull("Field", javaField);
+        Set modifiers = new HashSet(Arrays.asList(javaField.getModifiers()));
+        assertEquals("Modifier count", 2, javaField.getModifiers().length);
+        assertTrue("Static", modifiers.contains("static"));
+        assertTrue("Public", modifiers.contains("public"));
+    }
 }
Index: src/java/com/thoughtworks/qdox/JavaDocBuilder.java
===================================================================
--- src/java/com/thoughtworks/qdox/JavaDocBuilder.java	(revision 483)
+++ src/java/com/thoughtworks/qdox/JavaDocBuilder.java	(working copy)
@@ -222,6 +222,7 @@
         fieldDef.name = field.getName();
         fieldDef.type = getTypeName(fieldType);
         fieldDef.dimensions = getDimension(fieldType);
+        addModifiers( fieldDef.modifiers, field.getModifiers());
         binaryBuilder.addField(fieldDef);
     }
 
